plugins {
    id 'org.springframework.boot' version '2.7.4-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'com.adarshr.test-logger' version '3.2.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.hrabit64'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0-RC1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0-RC1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
    testImplementation 'it.ozimov:embedded-redis:0.7.3'
    implementation 'com.google.code.gson:gson:2.9.1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2'
    implementation 'org.slf4j:jcl-over-slf4j:1.7.36'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    testImplementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'com.github.vatbub:VirustotalPublicV2.0:1.1.rB'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation 'com.google.jimfs:jimfs:1.1'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

ext {
    // 아래서 사용할 변수 선언
    snippetsDir = file('build/generated-snippets')
}
tasks.named('test') {
    systemProperty 'spring.profiles.active', 'test'
    useJUnitPlatform()
}
asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources{
        include("**/index.adoc","**/common/*.adoc")
    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("/docs")
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
task devTest {
    outputs.dir snippetsDir
    finalizedBy test
}
task devBuild {
    dependsOn devTest
    dependsOn copyDocument
    finalizedBy clean, build
}
